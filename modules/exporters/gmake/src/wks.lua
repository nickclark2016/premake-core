---
-- GNU Makefile solution exporter.
---

local export = require('export')
local path = require('path')
local premake = require('premake')

local gmake = select(1, ...)

local wl = export.writeLine

local wks = {}


wks.elements = {
	solution = function (wk)
		return {
			wks.header,
			wks.defaultConfigurations,
			wks.verbosity,
			wks.projectConfigurations,
			wks.projects,
			wks.phonies,
			wks.projectRules,
			wks.cleanRule,
			wks.helpRule
		}
	end
}


---
-- Gets the filename for the provided workspace
--
-- @param wk
--  Workspace to get file name of
---
function wks.filename(wk)
	return path.join(wk.location, 'Makefile')
end


---
-- Exports the workspace/solution
--
-- @param wk
--  workspace/solution to export
---
function wks.export(wk)
	export.eol('\r\n')
	export.indentString('\t')
	premake.callArray(wks.elements.solution, wk)
end


---
-- Prints header of solution makefile.
---
function wks.header(wk)
	wl('# GNU Makefile solution file autogenerated by Premake')
	wl()
end


---
-- Specifies the default configurations in the file, if none are provided to make
---
function wks.defaultConfigurations(wk)
	if #wk.configs > 0 then
		wl('ifndef config')
		export.indent()
		wl('config=' .. wk.configs[1].name:lower())
		export.outdent()
		wl('endif')
		wl()
	end
end


---
-- Prints the verbosity flags for the solution.
--
-- @param wk
--  solution to print for
---
function wks.verbosity(wk)
	wl('ifndef verbose')
	export.indent()
	wl('SILENT = @')
	export.outdent()
	wl('endif')
	wl()
end


---
-- Prints all project configurations in the solution.
--
-- @param wk
--  solution to print projects for
---
function wks.projectConfigurations(wk)
	for _, cfg in ipairs(wk.configs) do
		local name = cfg.name:lower()

		local conditional = nil
		if _ == 1 then
			conditional = 'ifeq ($(config), ' .. name .. ')'
		else
			conditional = 'else ifeq ($(config), ' .. name .. ')'
		end

		wl(conditional)
		export.indent()
		for j = 1, #wk.projects do
			local prj = wk.projects[j]
			wl('%s_config=%s', prj.name, name)
		end
		export.outdent()
	end

	if #wk.configs > 0 then
		wl('else')
		export.indent()
		wl('$(error "Unknown configuration: $(config)")')
		export.outdent()
		wl('endif')
		wl()
	end
end


---
-- Lists all projects in the solution.
--
-- @param wk
--  solution to list projects of
---
function wks.projects(wk)
	local projects = table.map(wk.projects, function(key, value)
		return value.name
	end)
	if #projects > 0 then
		wl('PROJECTS := %s', table.concat(projects, ' '))
	else
		wl('PROJECTS :=')
	end
	wl()
end


---
-- Lists all phonies for the solution.
--
-- @param wk
--  workspace to print phonies of
---
function wks.phonies(wk)
	-- TODO: Groups
	wl('.PHONY: all clean help $(PROJECTS)')
	wl()
end


---
-- Prints all project rules for the solution.
--
-- @param wk
--  solution to print projects of
---
function wks.projectRules(wk)
	for _, prj in ipairs(wk.projects) do
		-- TODO: Dependencies
		local deps = {}

		if #deps > 0 then
			wl('%s: %s', prj.name, table.concat(deps, ' '))
		else
			wl('%s:', prj.name)
		end
		wl('ifneq (, $(config))')
		export.indent()

		local prjPath = gmake.getMakefileName(prj, true, wk.root)
		local prjDir = path.getDirectory(path.getRelative(wk.location, prjPath))
		local prjName = path.getName(prjPath)

		wl('@echo "==== Building %s ($(config)) ===="', prj.name)
		wl('@${MAKE} --no-print-directory -C %s -f %s config=$(config)', prjDir, prjName)
		export.outdent()
		wl('endif')
		wl()
	end
end


---
-- Prints all clean rules for the solution.
--
-- @param wk
--  solution to print clean rules for
---
function wks.cleanRule(wk)
	wl('clean:')
	export.indent()
	for _, prj in ipairs(wk.projects) do
		local prjPath = gmake.getMakefileName(prj, true, wk.root)
		local prjDir = path.getDirectory(path.getRelative(wk.location, prjPath))
		local prjName = path.getName(prjPath)

		wl('@${MAKE} --no-print-directory -C %s -f %s clean', prjDir, prjName)
	end
	export.outdent()
	wl()
end


---
-- Prints the help rules for the solution.
--
-- @param wk
--  solution to print help rule for
---
function wks.helpRule(wk)
	wl('help:')
	export.indent()
	wl('@echo "Usage: make [config=name] [target]"')
	wl('@echo ""')
	if #wk.configurations > 0 then
		wl('@echo "Configurations:"')
		for _, cfg in ipairs(wk.configs) do
			wl('@echo "	%s"', cfg.name:lower())
		end
		wl('@echo ""')
	end
	wl('@echo "Targets:"')
	wl('@echo "	all [default]"')
	wl('@echo "	clean"')
	wl('@echo "	help [Prints this message]"')
	for _, prj in ipairs(wk.projects) do
		wl('@echo "	%s"', prj.name)
	end
	wl('@echo ""')
	wl('@echo "For more information, see https://premake.github.io"')
	export.outdent()
	wl()
end


return wks